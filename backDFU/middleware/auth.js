// backDFU/middleware/auth.js - VERS√ÉO CORRIGIDA
const admin = require('../config/firebase');

const authenticateToken = async (req, res, next) => {
  try {
    console.log('üîç MIDDLEWARE: Verificando Firebase Admin...');
    
    // ‚≠ê VERIFICAR SE ADMIN EST√Å CONFIGURADO
    if (!admin.apps || admin.apps.length === 0) {
      console.error('‚ùå MIDDLEWARE: Firebase Admin n√£o inicializado');
      return res.status(500).json({
        erro: 'Erro de configura√ß√£o',
        message: 'Servidor n√£o configurado corretamente'
      });
    }

    const authHeader = req.headers.authorization;
    console.log('üîë MIDDLEWARE: Header Authorization:', authHeader ? 'Presente' : 'Ausente');
    
    const token = authHeader && authHeader.split(' ')[1];
    console.log('üîë MIDDLEWARE: Token extra√≠do:', token ? `${token.substring(0, 20)}...` : 'Nulo');

    if (!token) {
      console.log('‚ùå MIDDLEWARE: Token n√£o fornecido');
      return res.status(401).json({ 
        erro: 'Token de acesso n√£o fornecido',
        message: 'Autoriza√ß√£o necess√°ria'
      });
    }

    // ‚≠ê VERIFICAR TOKEN NO FIREBASE
    console.log('üî• MIDDLEWARE: Verificando token no Firebase...');
    
    const authService = admin.auth();
    console.log('üî• MIDDLEWARE: Auth service obtido:', typeof authService);
    
    const decoded = await authService.verifyIdToken(token);
    console.log('‚úÖ MIDDLEWARE: Token verificado com sucesso');
    console.log('üë§ MIDDLEWARE: UID:', decoded.uid);

    // ‚≠ê ADICIONAR DADOS DO FIREBASE
    req.firebaseUid = decoded.uid;
    req.firebaseUser = {
      uid: decoded.uid,
      email: decoded.email,
      emailVerified: decoded.email_verified
    };

    console.log('‚úÖ MIDDLEWARE: Prosseguindo para pr√≥ximo middleware...');
    next();
    
  } catch (error) {
    console.error('‚ùå MIDDLEWARE: Erro completo:', error);
    
    if (error.code === 'auth/id-token-expired') {
      return res.status(401).json({
        erro: 'Token expirado',
        message: 'Fa√ßa login novamente'
      });
    }
    
    if (error.code === 'auth/argument-error') {
      return res.status(403).json({
        erro: 'Token inv√°lido',
        message: 'Token malformado'
      });
    }
    
    return res.status(403).json({
      erro: 'Token inv√°lido',
      message: 'N√£o foi poss√≠vel verificar a autentica√ß√£o'
    });
  }
};

module.exports = authenticateToken;